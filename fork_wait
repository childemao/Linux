#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>


int main(void)
{
    pid_t pid;

    if((pid = fork()) < 0)
    {
        perror("fork");
        exit(1);// 出错返回
    }
    else if(pid == 0)
    { // first child
        if((pid = fork()) < 0)
        {
            perror("fork");
            exit(1);
        }
        else if(pid > 0)
        {
            exit(0); // parent from sencond fork == first child
        }

        /*
       
         * 我们是第二个孩子;在上面的语句中，一旦真正的父类调用exit()，父类就变成了init。
         * 这就是我们继续执行的地方，我们知道当我们完成时，init将获得我们的状态
         * */
        sleep(2);
        printf("second child, parent pid = %ld\n", (long)getpid());
        exit(0);
    }

    if(waitpid(pid, NULL, 0) != pid)
    {
        perror("waitpid");
        exit(2);
    }

    /*
     * 我们是父进程(原始进程);我们继续执行,知道我们不是第二个孩子的父亲。
     * */
    return 0;
}
